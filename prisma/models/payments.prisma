// Pi payments/transactions
model PiPayment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    userId      String
    amount      Float
    type        PaymentType
    description String?

    // Pi Network Integration
    piTxId      String?
    piPaymentId String?
    status      PaymentStatus @default(PENDING)

    // Metadata
    metadata Json?

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("pi_payments")
}

// Share redemptions
model ShareRedemption {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    userId         String
    sharesRedeemed Float
    piReceived     Float
    redemptionRate Float

    // Status
    status      RedemptionStatus @default(PENDING)
    processedAt DateTime?

    // Pi Network Integration
    piTxId      String?
    piPaymentId String?

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("share_redemptions")
}

enum PaymentType {
    MINING_REWARD
    ACHIEVEMENT_BONUS
    UPGRADE_PURCHASE
    SHARE_REDEMPTION
    BOOST_PURCHASE
    ADJUSTMENT
}

enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    CANCELLED
}

enum RedemptionStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
    CANCELLED
}
