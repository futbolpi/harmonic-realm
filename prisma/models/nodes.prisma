// Node types configuration
model NodeType {
    id                 String         @id
    name               String
    cellId             String
    description        String // Basic flavor text
    extendedLore       String? // Optional boosted lore for engaging stories (e.g., AI-generated epics)
    baseYieldPerMinute Float
    maxMiners          Int
    lockInMinutes      Int // Dynamically generated based on rarity (e.g., Common: 6, Legendary: 144)
    rarity             NodeTypeRarity
    iconUrl            String?
    phase              Int? // Genesis phase (e.g., 1 for initial, null for non-phased-release)
    echoIntensity      Float          @default(1.0) // Lore modifier for resonance

    // Relations
    nodes   Node[]
    mastery UserNodeMastery[]

    @@index([rarity, phase]) // For efficient queries on rarity/phase
    @@map("node_types")
}

// Individual node instances
model Node {
    id            String  @id @default(cuid())
    name          String
    typeId        String
    latitude      Float
    longitude     Float
    openForMining Boolean @default(true)
    sponsor       String?
    lore          String
    phase         Int? // Mirrors NodeType phase for direct node filtering
    echoIntensity Float   @default(1.0)

    // Relations
    type     NodeType        @relation(fields: [typeId], references: [id])
    sessions MiningSession[]

    @@index([phase]) // Efficient phase-based queries
    @@map("nodes")
}

// User node upgrades
model UserNodeUpgrade {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    userId     String
    nodeTypeId Int
    level      Int    @default(1)
    effectPct  Float  @default(0.0)

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, nodeTypeId])
    @@map("user_node_upgrades")
}

// User node mastery
model UserNodeMastery {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId         String
    nodeTypeId     String
    level          Int    @default(0)
    totalSessions  Int    @default(0)
    totalTimeSpent Int    @default(0) // in minutes
    bonusPercent   Float  @default(0.0)

    // Relations
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    nodeType NodeType @relation(fields: [nodeTypeId], references: [id], onDelete: Cascade)

    @@unique([userId, nodeTypeId])
    @@map("user_node_mastery")
}

// Enums
enum NodeTypeRarity {
    Common
    Uncommon
    Rare
    Epic
    Legendary
}
